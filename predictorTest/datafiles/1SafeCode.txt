#include "stdafx.h"
#include<string>
#include<fstream>
#include<iostream>
#include<vector>
#include<algorithm>
#include<filesystem>


using namespace std;


vector<string> v;
vector<int> r;
vector<string> email;
vector<string> password;
vector<string> name;
vector<string> website;
vector<string> analysed;
vector<string> patternstrings;
vector<string>::iterator first;
vector<string>::iterator filecount;
string s1, s2, s3, s4;
int a = -1, b = -1, c = -1, d = -1,e=-1,f=-1,g=-1;


//filesystem
vector<string> get_all_files_recursive(const string& path) {
	vector<string> file_names;
	using iterator = experimental::filesystem::recursive_directory_iterator;
	for (iterator iter(path); iter != iterator{}; ++iter) {
		file_names.push_back(iter->path().string());
	}
	return file_names;
}

//will remove delimeters from RAW data
void delimeterTest(string file_n) {
	ifstream file(file_n);
	while (getline(file, s1)) {
		v.push_back(s1);
	}
	file.close();
	for (first = v.begin(); first != v.end(); first++) {
		s1 = *first;
		for (int x = (s1.find(":") + 1); x < s1.length(); x++) {
			if (s1[x] == ':') {
				s1.erase(x, 1);
				--x;
			}
		}
		*first = s1;
	}
	s1.clear();
	/*ofstream g("c:\\users\\atiqg\\documents\\project\\test1\\predictortest\\predictortest\\datafiles\\data.txt");
	for (first = v.begin(); first != v.end(); ++first) {
		g << *first << "\n";
	}
	g.close();*/
	cout << " DelimeterTest is Done\n";
}

//will lowercase
void lowerCase() {
	for (first = v.begin(); first != v.end(); first++) {
		s1 = *first;
		transform(s1.begin(), s1.end(), s1.begin(), ::tolower);
		*first = s1;
	}
	/*ofstream data2("C:\\Users\\atiqg\\Documents\\project\\test1\\predictorTest\\predictorTest\\datafiles\\Data.txt");
	for (first = v.begin(); first != v.end(); first++) {
	data2 << *first << "\n";
	}
	data2.close();*/
	cout << "Lower Casing is Done\n";
}

//create a years file
void dobs() {
	vector<int> dob;
	vector<int>::iterator second;
	for (int i = 1900; i<2021; i++) {
		dob.push_back(i);
	}
	cout << "Dobs\n";
}

//will extract Passwords and emails seprately
void dataParsing() {
	bool x = true, y = true;
	first = v.begin();
	while (first!=v.end()) {
		s1 = *first;
		for (int i = 0; i<s1.length(); i++) {
			if (s1[i] != ':'&&x) {
				s2 += s1[i];
				continue;
			}
			if (s1[i] == ':') {
				i++;
				x = false;
			}
			s3 += s1[i];
		}
		email.push_back(s2);
		password.push_back(s3);
		s2.clear();
		s3.clear();
		x = true;
		first++;
	}
	//cout << v.size() << " " << p.size() << " " << q.size() << "\n";
	//ofstream m("C:\\Users\\atiqg\\Documents\\project\\test1\\predictorTest\\predictorTest\\datafiles\\emails.txt");
	//for (first = p.begin(); first<p.end(); first++) {
	//	m << *first << "\n";
	//}
	//m.close();
	//ofstream n("C:\\Users\\atiqg\\Documents\\project\\test1\\predictorTest\\predictorTest\\datafiles\\passwords.txt");
	//for (first = q.begin(); first<q.end(); first++) {
	//	n << *first << "\n";
	//}
	//n.close();
	s1.clear();
	s2.clear();
	s3.clear();
	cout << "Data Parsing is Done\n";
}

//extract first and last part of the email
void extractEmail() {
	/*fstream f("C:\\Users\\atiqg\\Documents\\project\\test1\\predictorTest\\predictorTest\\datafiles\\emails.txt", ios::in);
	while (getline(f, s1)) {
		v.push_back(s1);
	}
	f.close();*/
	//for(first=v.begin(); first!=v.end(); ++first){
	//    cout<<*first<<"\n";
	//}
	//extract(v, name, website, first);
	int i, j;
	for (first = email.begin(); first != email.end(); ++first) {
		s1 = *first;
		int len = s1.length();
		for (i = 0; i != len; i++) {
			if (s1[i] != '@') {
				s2 += s1[i];
				continue;
			}
			break;
		}
		name.push_back(s2);
		s2.clear();
		i++;
		for (j = i; j != len; j++) {
			if (s1[j] != '.') {
				s3 += s1[j];
				continue;
			}
			break;
		}
		website.push_back(s3);
		s3.clear();
	}
	/*ofstream g("C:\\Users\\atiqg\\Documents\\project\\test1\\predictorTest\\predictorTest\\datafiles\\names.txt");
	for (first = name.begin(); first != name.end(); ++first) {
		g << *first << "\n";
	}
	g.close();
	ofstream k("C:\\Users\\atiqg\\Documents\\project\\test1\\predictorTest\\predictorTest\\datafiles\\websites.txt");
	for (first = website.begin(); first != website.end(); ++first) {
		k << *first << "\n";
	}
	k.close();*/
	s1.clear();
	s2.clear();
	s3.clear();
	cout << "email extraction is done\n";
}

//Creating patter in Data analyse function
string pattern(int &a, int &b, int &c, int &d, int &e, int &f) {
	int x[] = { a,b,c,d,e,f };
	int min = 100, n = 6, index;
	string str;
	
	for (int j = 0; j < (sizeof(x) / sizeof(*x)); j++) {
		if (x[j] == -1) {
			n--;
		}
	}
	while (n != 0) {
		for (int i = 0; i < (sizeof(x) / sizeof(*x)); i++) {
			if (x[i] == -1) {
				continue;
			}
			else {
				if (min > x[i]) {
					min = x[i];
					index = i;
				}
			}
		}
		//cout << min << " " << index << " " << name[index] << "\n";
		x[index] = -1;
		n--;
		min = 100;
		str += patternstrings[index];
	}
	return str;
}

//analysed data
void givenDataAnalyse(int output_count) {
	vector<string> dob;
	vector<string> l;
	vector<string> words;
	vector<string>::iterator second;
	vector<string>::iterator third;
	vector<string>::iterator fourth;
	vector<string>::iterator fifth;
	int a = -1, b = -1, c = -1,d=-1;
	string str,str2;
	patternstrings.push_back("Name/");
	patternstrings.push_back("Website/");
	patternstrings.push_back("Location/");
	patternstrings.push_back("DOB/");
	patternstrings.push_back("Common/");
	patternstrings.push_back("Common/");
	//read files
	ifstream dobs("C:\\Users\\atiqg\\Documents\\project\\test1\\predictorTest\\predictorTest\\datafiles\\dobs.txt");
	while (getline(dobs, s4)) {
		dob.push_back(s4);
	}
	s4.clear();
	dobs.close();
	ifstream loc("C:\\Users\\atiqg\\Documents\\project\\test1\\predictorTest\\predictorTest\\datafiles\\locations.txt");
	while (getline(loc, s4)) {
		l.push_back(s4);
	}
	s4.clear();
	loc.close();
	ifstream common("C:\\Users\\atiqg\\Documents\\project\\test1\\predictorTest\\predictorTest\\datafiles\\Common.txt");
	while (getline(common, s1)) {
		words.push_back(s1);
	}
	common.close();
	
	//compare
	first = password.begin();
	second = name.begin();
	third = website.begin();
	int count = 0;
	while ((first!=password.end() && second!=name.end()) && third!=website.end()) {
		s1 = *first;
		s2 = *second;
		s3 = *third;
		str2 = " Password: " + s1;
		if (s1.find(s2) != string::npos) {
			a = s1.find(s2);
			s1.erase(a, s2.length());
		}
		if (s1.find(s3) != string::npos) {
			b = s1.find(s3);
			s1.erase(b, s3.length());
		}
		int flag = 0;
		for (fourth = l.begin(); fourth < l.end(); fourth++) {
			if (s1.find(*fourth) != string::npos) {
				str = *fourth;
				c = s1.find(str);
				s1.erase(c, str.length());
				flag = 1;
				break;
			}
		}
		flag = 0;
		for (fourth = dob.begin(); fourth < dob.end(); fourth++) {
			if (s1.find(*fourth) != string::npos) {
				str = *fourth;
				d = s1.find(str);
				s1.erase(d, str.length());
				flag = 1;
				break;
			}
		}
		flag = 0;
		
		s4 += "     Common: ";
		bool firstCommon=true, secCommon=false, thirdCommon=false;
		for (fourth = words.begin(); fourth != words.end(); fourth++) {
			if (s1.find(*fourth) != string::npos && firstCommon) {
				s4 += *fourth + "/";
				str = *fourth;
				e = s1.find(str);
				s1.erase(e, str.length());
				firstCommon = false;
				secCommon = true;
				flag = 1;
			}
			if (s1.find(*fourth) != string::npos && secCommon) {
				s4 += *fourth + "/";
				str = *fourth;
				f = s1.find(str);
				s1.erase(f, str.length());
				secCommon = false;
				thirdCommon = true;
				flag = 1;
			}
			if (s1.find(*fourth) != string::npos && thirdCommon) {
				s4 += *fourth + "/";
				str = *fourth;
				g = s1.find(str);
				s1.erase(g, str.length());
				thirdCommon = false;
				flag = 1;
			}
		}
		if (flag == 0) {
			s4 += "No";
		}

		s4 += "   pattern: " + pattern(a, b, c, d, e, f);
		s4 += str2;
		s4 += "  UnknownPart: " + s1;
		a = -1, b = -1, c = -1, d = -1, e = -1, f = -1, g = -1;
		analysed.push_back(s4);
		s4.clear();
		first++;
		second++;
		third++;
		count++;
		if (count % 10000 == 0) {
			cout << count / 10000 << "\n";
		}
	}



	ofstream ans("C:\\Users\\atiqg\\Documents\\project\\test1\\predictorTest\\predictorTest\\Output\\"+to_string(output_count)+".txt");
	for (first = analysed.begin(); first <analysed.end(); first++) {
		ans << *first << endl;
	}
	ans.close();
	
	s1.clear();
	s2.clear();
	s3.clear();
	s4.clear();
	cout << "User DATA is Analysied\n";
}


int main()
{
	int stop, count = 1, while_count = 1;
	string file_name;
	vector<string> file_list = get_all_files_recursive("C:/Users/atiqg/Documents/project/test1/predictorTest/predictorTest/Input");
	filecount = file_list.begin();
	dobs();
	while (filecount!=file_list.end()) {
		cout <<"\n"<< " Starting file:" << file_name << " \n";
		file_name = *filecount;
		delimeterTest(file_name);
		lowerCase();
		dataParsing();
		extractEmail();
		givenDataAnalyse(count);
		count++;
		filecount++;
		v.clear();
		r.clear();
		email.clear();
		password.clear();
		website.clear();
		name.clear();
		analysed.clear();
		patternstrings.clear();
		s1.clear();
		s2.clear();
		s3.clear();
		s4.clear();
		a = -1; b = -1; c = -1; d = -1; e = -1; f = -1; g = -1;
		cout << while_count<<"  Completed" << file_name << "\n";
		while_count++;
	}
	cout << "\n\nProcess is Done";

	//remember to make a input function
	/*delimeterTest();
	lowerCase();
	dataParsing();
	extractEmail();
	givenDataAnalyse();

	for (first = analysed.begin(); first != analysed.end(); first++) {
		cout << *first << "\n";
	}
	cout << "\n\n";
	for (first = password.begin(); first != password.end(); first++) {
	cout << *first << "\n";
	}
	cout << "\n\n";
	for (first = name.begin(); first != name.end(); first++) {
		cout << *first << "\n";
	}
	cout << "\n\n";
	for (first = website.begin(); first != website.end(); first++) {
		cout << *first << "\n";
	}
	cout << "\n\n";*/
	cin >> stop;
    return 0;
}